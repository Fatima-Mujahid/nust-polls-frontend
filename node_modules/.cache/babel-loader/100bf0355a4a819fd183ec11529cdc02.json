{"ast":null,"code":"var _jsxFileName = \"C:\\\\nust-polls\\\\nust-polls-frontend\\\\src\\\\Components\\\\Existing\\\\NewPoll\\\\CenteredTabs\\\\QuestionsTab\\\\Question\\\\Animated DropDown\\\\AnimatedDropDown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport UnopDropdown from \"unop-react-dropdown\";\nimport \"./AnimatedDropDown.css\";\nimport { AlignLeft, ChevronRight, Circle } from 'lucide-react';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AnimatedDropDown(props) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n\n  const handler = () => {\n    setOpen(!open);\n  };\n\n  const [options, setOptions] = useState([{\n    type: \"TextBased\",\n    name: \"Short Text\"\n  }, {\n    type: \"MCQ\",\n    name: \"Multiple Choice\"\n  }]);\n  const [selectedValue, setSelectedValue] = useState(props.selected);\n  const [focused, setFocused] = useState(false);\n\n  const onFocus = () => setFocused(true);\n\n  const onBlur = () => setFocused(false);\n\n  function select(val) {\n    setSelectedValue(val);\n    props.onSelection(val);\n    props.switch(val);\n  }\n\n  function isSelected(val) {\n    return val === selectedValue;\n  } // Change props and see effect\n\n\n  return /*#__PURE__*/_jsxDEV(UnopDropdown, {\n    onAppear: handler,\n    onDisappearStart: handler,\n    trigger: /*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"AnimatedDropdownButton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this),\n    closeOnClickOut: true,\n    delay: 300,\n    align: \"LEFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AnimatedDropDown, \"QaG8fmA/8PrEllXwgNbPPl0k7vQ=\");\n\n_c = AnimatedDropDown;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedDropDown\");","map":{"version":3,"sources":["C:/nust-polls/nust-polls-frontend/src/Components/Existing/NewPoll/CenteredTabs/QuestionsTab/Question/Animated DropDown/AnimatedDropDown.js"],"names":["useEffect","useState","UnopDropdown","AlignLeft","ChevronRight","Circle","$","AnimatedDropDown","props","open","setOpen","handler","options","setOptions","type","name","selectedValue","setSelectedValue","selected","focused","setFocused","onFocus","onBlur","select","val","onSelection","switch","isSelected"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAO,wBAAP;AACA,SAAQC,SAAR,EAAmBC,YAAnB,EAAiCC,MAAjC,QAA8C,cAA9C;AACA,OAAOC,CAAP,MAAc,QAAd;;AAGA,eAAe,SAASC,gBAAT,CAA2BC,KAA3B,EAAiC;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMU,OAAO,GAAG,MAAM;AAClBD,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACH,GAFD;;AAKA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CACnC;AACIa,IAAAA,IAAI,EAAC,WADT;AAEIC,IAAAA,IAAI,EAAC;AAFT,GADmC,EAIjC;AACED,IAAAA,IAAI,EAAC,KADP;AAEEC,IAAAA,IAAI,EAAC;AAFP,GAJiC,CAAD,CAAtC;AAWA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAC9CO,KAAK,CAACU,QADwC,CAAlD;AAIA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMoB,OAAO,GAAG,MAAMD,UAAU,CAAC,IAAD,CAAhC;;AACA,QAAME,MAAM,GAAG,MAAMF,UAAU,CAAC,KAAD,CAA/B;;AAEA,WAASG,MAAT,CAAgBC,GAAhB,EAAqB;AACjBP,IAAAA,gBAAgB,CAACO,GAAD,CAAhB;AACAhB,IAAAA,KAAK,CAACiB,WAAN,CAAkBD,GAAlB;AACAhB,IAAAA,KAAK,CAACkB,MAAN,CAAaF,GAAb;AACH;;AAED,WAASG,UAAT,CAAoBH,GAApB,EAAwB;AACpB,WAAOA,GAAG,KAAGR,aAAb;AACH,GAlC2C,CAqC5C;;;AACA,sBAEI,QAAC,YAAD;AACI,IAAA,QAAQ,EAAEL,OADd;AAEI,IAAA,gBAAgB,EAAEA,OAFtB;AAII,IAAA,OAAO,eACP;AAAG,MAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YALJ;AAqBI,IAAA,eAAe,MArBnB;AAsBI,IAAA,KAAK,EAAE,GAtBX;AAuBI,IAAA,KAAK,EAAC;AAvBV;AAAA;AAAA;AAAA;AAAA,UAFJ;AAmDH;;GAzFuBJ,gB;;KAAAA,gB;AAyFvB","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport UnopDropdown from \"unop-react-dropdown\";\r\nimport \"./AnimatedDropDown.css\"\r\nimport {AlignLeft, ChevronRight, Circle} from 'lucide-react'\r\nimport $ from 'jquery';\r\n\r\n\r\nexport default function AnimatedDropDown (props){\r\n    const [open, setOpen] = useState(false);\r\n    const handler = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n\r\n    const [options, setOptions] = useState([\r\n        {\r\n            type:\"TextBased\",\r\n            name:\"Short Text\"\r\n        },{\r\n            type:\"MCQ\",\r\n            name:\"Multiple Choice\"\r\n        }\r\n    ]);\r\n\r\n\r\n    const [selectedValue, setSelectedValue] = useState(\r\n        props.selected\r\n    );\r\n\r\n    const [focused, setFocused] = useState(false)\r\n    const onFocus = () => setFocused(true)\r\n    const onBlur = () => setFocused(false)\r\n\r\n    function select(val) {\r\n        setSelectedValue(val)\r\n        props.onSelection(val);\r\n        props.switch(val)\r\n    }\r\n\r\n    function isSelected(val){\r\n        return val===selectedValue\r\n    }\r\n\r\n\r\n    // Change props and see effect\r\n    return (\r\n\r\n        <UnopDropdown\r\n            onAppear={handler}\r\n            onDisappearStart={handler}\r\n\r\n            trigger={\r\n            <a className=\"AnimatedDropdownButton\" >\r\n            {/*        {selectedValue === options[0].type ? <AlignLeft/>*/}\r\n            {/*            :*/}\r\n            {/*            <Circle size={15} fill={\"#085B91\"} style={{*/}\r\n            {/*                border: \"2px solid white\",*/}\r\n            {/*                outline: \"2px solid #085B91\",*/}\r\n            {/*                borderRadius: \"15px\"*/}\r\n            {/*            }}/>*/}\r\n            {/*        }*/}\r\n            {/*        {selectedValue === options[0].type ? options[0].name:options[1].name}*/}\r\n            {/*    <ChevronRight size={15} style={{*/}\r\n            {/*    transform: 'rotate(90deg)',*/}\r\n            {/*}}/>*/}\r\n            </a>\r\n\r\n            }\r\n            closeOnClickOut\r\n            delay={300}\r\n            align=\"LEFT\"\r\n        >\r\n            {/*<div className={\"dropdown-wrapper\"} >*/}\r\n            {/*<div*/}\r\n            {/*    className={`AnimatedDropdownStyles openAnimation ${*/}\r\n            {/*        !open ? \" closeAnimation\" : \"\" || focused?\" closeAnimation\" : \"\"*/}\r\n            {/*    }`}*/}\r\n            {/*>*/}\r\n            {/*    <div className={isSelected(options[0].type)? \"selected\":\"\"}  onClick={() => select(options[0].type)}>*/}\r\n            {/*        <AlignLeft size={16} fill={\"#085B91\"}style={{*/}\r\n            {/*            marginRight: \"12px\"*/}\r\n            {/*        }}/>*/}\r\n            {/*        {options[0].name} </div>*/}\r\n            {/*    <div className={isSelected(options[1].type)? \"selected\":\"\"} onClick={() => select(options[1].type)}>*/}\r\n            {/*        <Circle size={12} fill={\"#085B91\"} style={{*/}\r\n            {/*            border: \"2px solid white\",*/}\r\n            {/*            outline: \"2px solid #085B91\",*/}\r\n            {/*            borderRadius: \"15px\",*/}\r\n            {/*            marginRight: \"15px\"*/}\r\n            {/*        }}/>*/}\r\n            {/*        { options[1].name}</div>*/}\r\n            {/*</div>*/}\r\n            {/*</div>*/}\r\n        </UnopDropdown>\r\n\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}