{"ast":null,"code":"var _jsxFileName = \"C:\\\\nust-polls\\\\nust-polls-frontend\\\\src\\\\Components\\\\Existing\\\\NewPoll\\\\CenteredTabs\\\\QuestionsTab\\\\Question\\\\Animated DropDown\\\\AnimatedDropDown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport UnopDropdown from \"unop-react-dropdown\";\nimport \"./AnimatedDropDown.css\";\nimport { AlignLeft, ChevronRight, Circle } from 'lucide-react';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AnimatedDropDown(props) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n\n  const handler = () => {\n    setOpen(!open);\n  };\n\n  const [options, setOptions] = useState([{\n    type: \"TextBased\",\n    name: \"Short Text\"\n  }, {\n    type: \"MCQ\",\n    name: \"Multiple Choice\"\n  }]);\n  const [selectedValue, setSelectedValue] = useState(props.selected);\n  const [focused, setFocused] = useState(false);\n\n  const onFocus = () => setFocused(true);\n\n  const onBlur = () => setFocused(false);\n\n  function select(val) {\n    setSelectedValue(val);\n    props.onSelection(val);\n    props.switch();\n  }\n\n  function isSelected(val) {\n    return val === selectedValue;\n  } // Change props and see effect\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(UnopDropdown, {\n      onAppear: handler,\n      onDisappearStart: handler,\n      trigger: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"AnimatedDropdownButton\",\n        children: [selectedValue === options[0].type ? /*#__PURE__*/_jsxDEV(AlignLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 58\n        }, this) : /*#__PURE__*/_jsxDEV(Circle, {\n          size: 15,\n          fill: \"#085B91\",\n          style: {\n            border: \"2px solid white\",\n            outline: \"2px solid #085B91\",\n            borderRadius: \"15px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), selectedValue === options[0].type ? options[0].name : options[1].name, /*#__PURE__*/_jsxDEV(ChevronRight, {\n          size: 15,\n          style: {\n            transform: 'rotate(90deg)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this),\n      closeOnClickOut: handler,\n      delay: 300,\n      align: \"LEFT\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `AnimatedDropdownStyles openAnimation ${!open ? \" closeAnimation\" : \"\" || focused ? \" closeAnimation\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: isSelected(options[0].type) ? \"selected\" : \"\",\n          onClick: () => select(options[0].type),\n          children: [options[0].name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: isSelected(options[1].type) ? \"selected\" : \"\",\n          onClick: () => select(options[1].type),\n          children: options[1].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AnimatedDropDown, \"QaG8fmA/8PrEllXwgNbPPl0k7vQ=\");\n\n_c = AnimatedDropDown;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimatedDropDown\");","map":{"version":3,"sources":["C:/nust-polls/nust-polls-frontend/src/Components/Existing/NewPoll/CenteredTabs/QuestionsTab/Question/Animated DropDown/AnimatedDropDown.js"],"names":["useEffect","useState","UnopDropdown","AlignLeft","ChevronRight","Circle","$","AnimatedDropDown","props","open","setOpen","handler","options","setOptions","type","name","selectedValue","setSelectedValue","selected","focused","setFocused","onFocus","onBlur","select","val","onSelection","switch","isSelected","border","outline","borderRadius","transform"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport UnopDropdown from \"unop-react-dropdown\";\r\nimport \"./AnimatedDropDown.css\"\r\nimport {AlignLeft, ChevronRight, Circle} from 'lucide-react'\r\nimport $ from 'jquery';\r\n\r\n\r\nexport default function AnimatedDropDown (props){\r\n    const [open, setOpen] = useState(false);\r\n    const handler = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n\r\n    const [options, setOptions] = useState([\r\n        {\r\n            type:\"TextBased\",\r\n            name:\"Short Text\"\r\n        },{\r\n            type:\"MCQ\",\r\n            name:\"Multiple Choice\"\r\n        }\r\n    ]);\r\n\r\n\r\n    const [selectedValue, setSelectedValue] = useState(\r\n        props.selected\r\n    );\r\n\r\n    const [focused, setFocused] = useState(false)\r\n    const onFocus = () => setFocused(true)\r\n    const onBlur = () => setFocused(false)\r\n\r\n    function select(val) {\r\n        setSelectedValue(val)\r\n        props.onSelection(val);\r\n        props.switch()\r\n    }\r\n\r\n    function isSelected(val){\r\n        return val===selectedValue\r\n    }\r\n\r\n\r\n    // Change props and see effect\r\n    return (\r\n        <div className={\"dropdown-wrapper\"} >\r\n\r\n        <UnopDropdown\r\n            onAppear={handler}\r\n            onDisappearStart={handler}\r\n            trigger={\r\n            <button className=\"AnimatedDropdownButton\">\r\n                    {selectedValue === options[0].type ? <AlignLeft/>\r\n                        :\r\n                        <Circle size={15} fill={\"#085B91\"} style={{\r\n                            border: \"2px solid white\",\r\n                            outline: \"2px solid #085B91\",\r\n                            borderRadius: \"15px\"\r\n                        }}/>\r\n                    }\r\n                    {selectedValue === options[0].type ? options[0].name:options[1].name}\r\n                <ChevronRight size={15} style={{\r\n                transform: 'rotate(90deg)',\r\n            }}/></button>\r\n\r\n            }\r\n            closeOnClickOut={handler}\r\n            delay={300}\r\n            align=\"LEFT\"\r\n        >\r\n            <div\r\n                className={`AnimatedDropdownStyles openAnimation ${\r\n                    !open ? \" closeAnimation\" : \"\" || focused?\" closeAnimation\" : \"\"\r\n                }`}\r\n            >\r\n                <div className={isSelected(options[0].type)? \"selected\":\"\"}  onClick={() => select(options[0].type)}>{options[0].name} </div>\r\n                <div className={isSelected(options[1].type)? \"selected\":\"\"} onClick={() => select(options[1].type)}>{options[1].name}</div>\r\n            </div>\r\n        </UnopDropdown>\r\n        </div>\r\n\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}